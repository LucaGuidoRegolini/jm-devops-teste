# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
orbs:
  node: circleci/node@5.1.0

jobs:
  test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '16.13'
      - run: node --version
      - run:
          name: Run Tests
          command: npm run test
          working_directory: ./app

  push-to-ecr:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install AWS CLI
          command: sudo apt-get update && sudo apt-get install awscli
      - run:
          name: Config AWS account
          command: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_REGION
      - run:
          name: Authenticate with ECR
          command: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_USER_ID.dkr.ecr.$AWS_REGION.amazonaws.com/jm-develops-test
      - run:
          name: Build Docker Image
          command: docker build -t app:latest .
          working_directory: ./app
      - run:
          name: Push to ECR
          command: docker tag app:latest $AWS_USER_ID.dkr.ecr.$AWS_REGION.amazonaws.com/jm-develops-test:latest && docker push $AWS_USER_ID.dkr.ecr.$AWS_REGION.amazonaws.com/jm-develops-test:latest

  run-terraform:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install Terraform dependencies
          command:  sudo apt-get update && sudo apt-get install -y unzip

      - run:
          name: Install Terraform
          command:  curl -fsSL https://releases.hashicorp.com/terraform/1.6.5/terraform_1.6.5_linux_amd64.zip -o terraform.zip && sudo unzip terraform.zip -d /usr/local/bin

      - run:
          name: Terraform version
          command:  terraform --version

      - run:
          name: Install AWS CLI
          command: sudo apt-get update && sudo apt-get install awscli

      - run:
          name: Config AWS account
          command: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID && aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY && aws configure set default.region $AWS_REGION
      
      - run: 
          name: Terraform init
          command: terraform init
          working_directory: ./terraform/dev
      - run: 
          name: Terraform plan
          command: terraform plan -var="TF_VAR_ssh_key_public=$TF_VAR_SSH_KEY_PUBLIC"
          working_directory: ./terraform/dev
      - run: 
          name: Terraform apply
          command: terraform apply -auto-approve -var="TF_VAR_ssh_key_public=$TF_VAR_SSH_KEY_PUBLIC"
          working_directory: ./terraform/dev

      - run:
          name: Create Ansible hosts file
          command: |
            rm -f hosts.ini
            echo "[Terraform_ansible]" > hosts.ini
            echo "$(terraform output DEVELOP_IP)" >> hosts.ini
          working_directory: ./terraform/dev

      - persist_to_workspace:
            root: ./terraform/dev
            paths:
              - hosts.ini

  run-ansible: 
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: ./terraform/dev

      - run:
          name: Install Ansible
          command: sudo apt-get update && sudo apt-get install -y ansible

      - run:
          name: Ansible version
          command: ansible --version
      
      - add_ssh_keys:
          fingerprints: 
            - "4a:f0:09:67:99:fe:19:a9:56:20:eb:69:51:d3:2d:50"
            
      - run:
          name: Ansible playbook
          command: sudo ansible-playbook -i hosts.ini playbook.yml  -vvv
          working_directory: ./terraform/dev
          environment:
            ANSIBLE_HOST_KEY_CHECKING: "false"
            

     


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  deploy-workflow:
    jobs:
      - test
      - push-to-ecr:
          requires:
            - test
          filters:
            branches:
              only: master
      - run-terraform:
          requires:
            - test
          filters:
            branches:
              only: master
      - run-ansible:
          requires:
            - run-terraform
            - push-to-ecr
          filters:
            branches:
              only: master
